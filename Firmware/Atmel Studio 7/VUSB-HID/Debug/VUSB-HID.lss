
VUSB-HID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000008f6  0000098a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  00800064  00800064  0000098e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000098e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000a00  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001406  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5e  00000000  00000000  00001ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000107e  00000000  00000000  0000291c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  0000399c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000083f  00000000  00000000  00003aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c1f  00000000  00000000  000042df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00004efe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	66 c0       	rjmp	.+204    	; 0xce <__ctors_end>
   2:	9a c0       	rjmp	.+308    	; 0x138 <__vector_1>
   4:	ba c1       	rjmp	.+884    	; 0x37a <__vector_2>
   6:	7e c0       	rjmp	.+252    	; 0x104 <__bad_interrupt>
   8:	7d c0       	rjmp	.+250    	; 0x104 <__bad_interrupt>
   a:	7c c0       	rjmp	.+248    	; 0x104 <__bad_interrupt>
   c:	7b c0       	rjmp	.+246    	; 0x104 <__bad_interrupt>
   e:	7a c0       	rjmp	.+244    	; 0x104 <__bad_interrupt>
  10:	79 c0       	rjmp	.+242    	; 0x104 <__bad_interrupt>
  12:	78 c0       	rjmp	.+240    	; 0x104 <__bad_interrupt>
  14:	77 c0       	rjmp	.+238    	; 0x104 <__bad_interrupt>
  16:	76 c0       	rjmp	.+236    	; 0x104 <__bad_interrupt>
  18:	75 c0       	rjmp	.+234    	; 0x104 <__bad_interrupt>
  1a:	74 c0       	rjmp	.+232    	; 0x104 <__bad_interrupt>
  1c:	73 c0       	rjmp	.+230    	; 0x104 <__bad_interrupt>
  1e:	72 c0       	rjmp	.+228    	; 0x104 <__bad_interrupt>
  20:	71 c0       	rjmp	.+226    	; 0x104 <__bad_interrupt>
  22:	70 c0       	rjmp	.+224    	; 0x104 <__bad_interrupt>
  24:	6f c0       	rjmp	.+222    	; 0x104 <__bad_interrupt>

00000026 <__trampolines_end>:
  26:	05 0c       	add	r0, r5
  28:	09 01       	movw	r0, r18
  2a:	a1 01       	movw	r20, r2
  2c:	85 01       	movw	r16, r10
  2e:	15 00       	.word	0x0015	; ????
  30:	25 01       	movw	r4, r10
  32:	75 01       	movw	r14, r10
  34:	95 04       	cpc	r9, r5
  36:	19 b5       	in	r17, 0x29	; 41
  38:	29 b7       	in	r18, 0x39	; 57
  3a:	09 cd       	rjmp	.-1518   	; 0xfffffa4e <__eeprom_end+0xff7efa4e>
  3c:	81 02       	muls	r24, r17
  3e:	95 01       	movw	r18, r10
  40:	09 e2       	ldi	r16, 0x29	; 41
  42:	81 06       	cpc	r8, r17
  44:	95 02       	muls	r25, r21
  46:	09 e9       	ldi	r16, 0x99	; 153
  48:	09 ea       	ldi	r16, 0xA9	; 169
  4a:	81 02       	muls	r24, r17
  4c:	95 01       	movw	r18, r10
  4e:	81 03       	fmuls	r16, r17
  50:	c0 09       	Address 0x00000050 is out of bounds.
.word	0xffff	; ????

00000051 <usbDescriptorConfiguration>:
  51:	09 02 22 00 01 01 00 80 19 09 04 00 00 01 03 00     ..".............
  61:	00 00 09 21 01 01 00 01 22 2b 00 07 05 81 03 08     ...!...."+......
  71:	00 0a                                               ..

00000073 <usbDescriptorDevice>:
  73:	12 01 10 01 00 00 00 08 c0 16 cd 05 00 01 01 02     ................
  83:	03 01                                               ..

00000085 <usbDescriptorStringSerialNumber>:
  85:	0a 03 30 00 30 00 30 00 31 00                       ..0.0.0.1.

0000008f <usbDescriptorStringDevice>:
  8f:	28 03 48 00 49 00 44 00 20 00 4d 00 75 00 6c 00     (.H.I.D. .M.u.l.
  9f:	74 00 69 00 6d 00 65 00 64 00 69 00 61 00 20 00     t.i.m.e.d.i.a. .
  af:	44 00 69 00 61 00 6c 00                             D.i.a.l.

000000b7 <usbDescriptorStringVendor>:
  b7:	12 03 4a 00 42 00 42 00 20 00 48 00 61 00 63 00     ..J.B.B. .H.a.c.
  c7:	6b 00                                               k.

000000c9 <usbDescriptorString0>:
  c9:	04 03 09 04 00                                      .....

000000ce <__ctors_end>:
  ce:	11 24       	eor	r1, r1
  d0:	1f be       	out	0x3f, r1	; 63
  d2:	cf e5       	ldi	r28, 0x5F	; 95
  d4:	d4 e0       	ldi	r29, 0x04	; 4
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	cd bf       	out	0x3d, r28	; 61

000000da <__do_copy_data>:
  da:	10 e0       	ldi	r17, 0x00	; 0
  dc:	a0 e6       	ldi	r26, 0x60	; 96
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	e6 ef       	ldi	r30, 0xF6	; 246
  e2:	f8 e0       	ldi	r31, 0x08	; 8
  e4:	02 c0       	rjmp	.+4      	; 0xea <__do_copy_data+0x10>
  e6:	05 90       	lpm	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	a4 36       	cpi	r26, 0x64	; 100
  ec:	b1 07       	cpc	r27, r17
  ee:	d9 f7       	brne	.-10     	; 0xe6 <__do_copy_data+0xc>

000000f0 <__do_clear_bss>:
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	a4 e6       	ldi	r26, 0x64	; 100
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	01 c0       	rjmp	.+2      	; 0xfa <.do_clear_bss_start>

000000f8 <.do_clear_bss_loop>:
  f8:	1d 92       	st	X+, r1

000000fa <.do_clear_bss_start>:
  fa:	a4 3a       	cpi	r26, 0xA4	; 164
  fc:	b2 07       	cpc	r27, r18
  fe:	e1 f7       	brne	.-8      	; 0xf8 <.do_clear_bss_loop>
 100:	82 d2       	rcall	.+1284   	; 0x606 <main>
 102:	f7 c3       	rjmp	.+2030   	; 0x8f2 <_exit>

00000104 <__bad_interrupt>:
 104:	7d cf       	rjmp	.-262    	; 0x0 <__vectors>

00000106 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 106:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 108:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 10a:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 10c:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 10e:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 110:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 112:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 114:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 116:	09 c0       	rjmp	.+18     	; 0x12a <usbCrcLoopEntry>

00000118 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 118:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 11a:	82 27       	eor	r24, r18

0000011c <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 11c:	97 95       	ror	r25
    ror     resCrcL
 11e:	87 95       	ror	r24
    brcs    usbCrcNoXor
 120:	10 f0       	brcs	.+4      	; 0x126 <usbCrcNoXor>
    eor     resCrcL, polyL
 122:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 124:	95 27       	eor	r25, r21

00000126 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 126:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 128:	c8 f3       	brcs	.-14     	; 0x11c <usbCrcBitLoop>

0000012a <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 12a:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 12c:	a8 f3       	brcs	.-22     	; 0x118 <usbCrcByteLoop>

0000012e <usbCrcReady>:
usbCrcReady:
    ret
 12e:	08 95       	ret

00000130 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 130:	ea df       	rcall	.-44     	; 0x106 <usbCrc16>
    st      ptr+, resCrcL
 132:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 134:	9d 93       	st	X+, r25
    ret
 136:	08 95       	ret

00000138 <__vector_1>:
; Numbers in brackets are clocks counted from center of last sync bit
; when instruction starts

USB_INTR_VECTOR:
;order of registers pushed: YL, SREG YH, [sofError], bitcnt, shift, x1, x2, x3, x4, cnt
    push    YL                  ;[-25] push only what is necessary to sync with edge ASAP
 138:	cf 93       	push	r28
    in      YL, SREG            ;[-23]
 13a:	cf b7       	in	r28, 0x3f	; 63
    push    YL                  ;[-22]
 13c:	cf 93       	push	r28
    push    YH                  ;[-20]
 13e:	df 93       	push	r29

00000140 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 140:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 142:	82 9b       	sbis	0x10, 2	; 16
    brne    waitForJ        ; just make sure we have ANY timeout
 144:	e9 f7       	brne	.-6      	; 0x140 <waitForJ>

00000146 <waitForK>:
waitForK:
;The following code results in a sampling window of < 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS     ;[-15]
 146:	82 9b       	sbis	0x10, 2	; 16
    rjmp    foundK              ;[-14]
 148:	0b c0       	rjmp	.+22     	; 0x160 <foundK>
    sbis    USBIN, USBMINUS
 14a:	82 9b       	sbis	0x10, 2	; 16
    rjmp    foundK
 14c:	09 c0       	rjmp	.+18     	; 0x160 <foundK>
    sbis    USBIN, USBMINUS
 14e:	82 9b       	sbis	0x10, 2	; 16
    rjmp    foundK
 150:	07 c0       	rjmp	.+14     	; 0x160 <foundK>
    sbis    USBIN, USBMINUS
 152:	82 9b       	sbis	0x10, 2	; 16
    rjmp    foundK
 154:	05 c0       	rjmp	.+10     	; 0x160 <foundK>
    sbis    USBIN, USBMINUS
 156:	82 9b       	sbis	0x10, 2	; 16
    rjmp    foundK
 158:	03 c0       	rjmp	.+6      	; 0x160 <foundK>
    sbis    USBIN, USBMINUS
 15a:	82 9b       	sbis	0x10, 2	; 16
    rjmp    foundK
 15c:	01 c0       	rjmp	.+2      	; 0x160 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 15e:	8b c0       	rjmp	.+278    	; 0x276 <sofError>

00000160 <foundK>:
foundK:                         ;[-12]
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 5 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    bitcnt              ;[-12]
 160:	6f 93       	push	r22
;   [---]                       ;[-11]
    lds     YL, usbInputBufOffset;[-10]
 162:	c0 91 87 00 	lds	r28, 0x0087	; 0x800087 <usbInputBufOffset>
;   [---]                       ;[-9]
    clr     YH                  ;[-8]
 166:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));[-7] [rx loop init]
 168:	c2 57       	subi	r28, 0x72	; 114
    sbci    YH, hi8(-(usbRxBuf));[-6] [rx loop init]
 16a:	df 4f       	sbci	r29, 0xFF	; 255
    push    shift               ;[-5]
 16c:	2f 93       	push	r18
;   [---]                       ;[-4]
    ldi     bitcnt, 0x55        ;[-3] [rx loop init]
 16e:	65 e5       	ldi	r22, 0x55	; 85
    sbis    USBIN, USBMINUS     ;[-2] we want two bits K (sample 2 cycles too early)
 170:	82 9b       	sbis	0x10, 2	; 16
    rjmp    haveTwoBitsK        ;[-1]
 172:	03 c0       	rjmp	.+6      	; 0x17a <haveTwoBitsK>
    pop     shift               ;[0] undo the push from before
 174:	2f 91       	pop	r18
    pop     bitcnt              ;[2] undo the push from before
 176:	6f 91       	pop	r22
    rjmp    waitForK            ;[4] this was not the end of sync, retry
 178:	e6 cf       	rjmp	.-52     	; 0x146 <waitForK>

0000017a <haveTwoBitsK>:

;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
haveTwoBitsK:
    push    x1              ;[1]
 17a:	0f 93       	push	r16
    push    x2              ;[3]
 17c:	1f 93       	push	r17
    push    x3              ;[5]
 17e:	4f 93       	push	r20
    ldi     shift, 0        ;[7]
 180:	20 e0       	ldi	r18, 0x00	; 0
    ldi     x3, 1<<4        ;[8] [rx loop init] first sample is inverse bit, compensate that
 182:	40 e1       	ldi	r20, 0x10	; 16
    push    x4              ;[9] == leap
 184:	5f 93       	push	r21

    in      x1, USBIN       ;[11] <-- sample bit 0
 186:	00 b3       	in	r16, 0x10	; 16
    andi    x1, USBMASK     ;[12]
 188:	04 71       	andi	r16, 0x14	; 20
    bst     x1, USBMINUS    ;[13]
 18a:	02 fb       	bst	r16, 2
    bld     shift, 7        ;[14]
 18c:	27 f9       	bld	r18, 7
    push    cnt             ;[15]
 18e:	3f 93       	push	r19
    ldi     leap, 0         ;[17] [rx loop init]
 190:	50 e0       	ldi	r21, 0x00	; 0
    ldi     cnt, USB_BUFSIZE;[18] [rx loop init]
 192:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit1          ;[19] arrives at [21]
 194:	39 c0       	rjmp	.+114    	; 0x208 <rxbit1>

00000196 <unstuff6>:

; duration of unstuffing code should be 10.66666667 cycles. We adjust "leap"
; accordingly to approximate this value in the long run.

unstuff6:
    andi    x2, USBMASK ;[03]
 196:	14 71       	andi	r17, 0x14	; 20
    ori     x3, 1<<6    ;[04] will not be shifted any more
 198:	40 64       	ori	r20, 0x40	; 64
    andi    shift, ~0x80;[05]
 19a:	2f 77       	andi	r18, 0x7F	; 127
    mov     x1, x2      ;[06] sampled bit 7 is actually re-sampled bit 6
 19c:	01 2f       	mov	r16, r17
    subi    leap, -1    ;[07] total duration = 11 bits -> subtract 1/3
 19e:	5f 5f       	subi	r21, 0xFF	; 255
    rjmp    didUnstuff6 ;[08]
 1a0:	1e c0       	rjmp	.+60     	; 0x1de <didUnstuff6>

000001a2 <unstuff7>:

unstuff7:
    ori     x3, 1<<7    ;[09] will not be shifted any more
 1a2:	40 68       	ori	r20, 0x80	; 128
    in      x2, USBIN   ;[00] [10]  re-sample bit 7
 1a4:	10 b3       	in	r17, 0x10	; 16
    andi    x2, USBMASK ;[01]
 1a6:	14 71       	andi	r17, 0x14	; 20
    andi    shift, ~0x80;[02]
 1a8:	2f 77       	andi	r18, 0x7F	; 127
    subi    leap, 2     ;[03] total duration = 10 bits -> add 1/3
 1aa:	52 50       	subi	r21, 0x02	; 2
    rjmp    didUnstuff7 ;[04]
 1ac:	1f c0       	rjmp	.+62     	; 0x1ec <didUnstuff7>

000001ae <unstuffEven>:

unstuffEven:
    ori     x3, 1<<6    ;[09] will be shifted right 6 times for bit 0
 1ae:	40 64       	ori	r20, 0x40	; 64
    in      x1, USBIN   ;[00] [10]
 1b0:	00 b3       	in	r16, 0x10	; 16
    andi    shift, ~0x80;[01]
 1b2:	2f 77       	andi	r18, 0x7F	; 127
    andi    x1, USBMASK ;[02]
 1b4:	04 71       	andi	r16, 0x14	; 20
    breq    se0         ;[03]
 1b6:	d1 f1       	breq	.+116    	; 0x22c <se0>
    subi    leap, -1    ;[04] total duration = 11 bits -> subtract 1/3
 1b8:	5f 5f       	subi	r21, 0xFF	; 255
    nop2                ;[05]
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <unstuffEven+0xe>
    rjmp    didUnstuffE ;[06]
 1bc:	23 c0       	rjmp	.+70     	; 0x204 <didUnstuffE>

000001be <unstuffOdd>:

unstuffOdd:
    ori     x3, 1<<5    ;[09] will be shifted right 4 times for bit 1
 1be:	40 62       	ori	r20, 0x20	; 32
    in      x2, USBIN   ;[00] [10]
 1c0:	10 b3       	in	r17, 0x10	; 16
    andi    shift, ~0x80;[01]
 1c2:	2f 77       	andi	r18, 0x7F	; 127
    andi    x2, USBMASK ;[02]
 1c4:	14 71       	andi	r17, 0x14	; 20
    breq    se0         ;[03]
 1c6:	91 f1       	breq	.+100    	; 0x22c <se0>
    subi    leap, -1    ;[04] total duration = 11 bits -> subtract 1/3
 1c8:	5f 5f       	subi	r21, 0xFF	; 255
    nop2                ;[05]
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <unstuffOdd+0xe>
    rjmp    didUnstuffO ;[06]
 1cc:	25 c0       	rjmp	.+74     	; 0x218 <didUnstuffO>

000001ce <rxByteLoop>:

rxByteLoop:
    andi    x1, USBMASK ;[03]
 1ce:	04 71       	andi	r16, 0x14	; 20
    eor     x2, x1      ;[04]
 1d0:	10 27       	eor	r17, r16
    subi    leap, 1     ;[05]
 1d2:	51 50       	subi	r21, 0x01	; 1
    brpl    skipLeap    ;[06]
 1d4:	12 f4       	brpl	.+4      	; 0x1da <skipLeap>
    subi    leap, -3    ;1 one leap cycle every 3rd byte -> 85 + 1/3 cycles per byte
 1d6:	5d 5f       	subi	r21, 0xFD	; 253
	...

000001da <skipLeap>:
    nop                 ;1
skipLeap:
    subi    x2, 1       ;[08]
 1da:	11 50       	subi	r17, 0x01	; 1
    ror     shift       ;[09]
 1dc:	27 95       	ror	r18

000001de <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0xfc ;[10]
 1de:	2c 3f       	cpi	r18, 0xFC	; 252
    in      x2, USBIN   ;[00] [11] <-- sample bit 7
 1e0:	10 b3       	in	r17, 0x10	; 16
    brcc    unstuff6    ;[01]
 1e2:	c8 f6       	brcc	.-78     	; 0x196 <unstuff6>
    andi    x2, USBMASK ;[02]
 1e4:	14 71       	andi	r17, 0x14	; 20
    eor     x1, x2      ;[03]
 1e6:	01 27       	eor	r16, r17
    subi    x1, 1       ;[04]
 1e8:	01 50       	subi	r16, 0x01	; 1
    ror     shift       ;[05]
 1ea:	27 95       	ror	r18

000001ec <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0xfc ;[06]
 1ec:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuff7    ;[07]
 1ee:	c8 f6       	brcc	.-78     	; 0x1a2 <unstuff7>
    eor     x3, shift   ;[08] reconstruct: x3 is 1 at bit locations we changed, 0 at others
 1f0:	42 27       	eor	r20, r18
    st      y+, x3      ;[09] store data
 1f2:	49 93       	st	Y+, r20

000001f4 <rxBitLoop>:
rxBitLoop:
    in      x1, USBIN   ;[00] [11] <-- sample bit 0/2/4
 1f4:	00 b3       	in	r16, 0x10	; 16
    andi    x1, USBMASK ;[01]
 1f6:	04 71       	andi	r16, 0x14	; 20
    eor     x2, x1      ;[02]
 1f8:	10 27       	eor	r17, r16
    andi    x3, 0x3f    ;[03] topmost two bits reserved for 6 and 7
 1fa:	4f 73       	andi	r20, 0x3F	; 63
    subi    x2, 1       ;[04]
 1fc:	11 50       	subi	r17, 0x01	; 1
    ror     shift       ;[05]
 1fe:	27 95       	ror	r18
    cpi     shift, 0xfc ;[06]
 200:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuffEven ;[07]
 202:	a8 f6       	brcc	.-86     	; 0x1ae <unstuffEven>

00000204 <didUnstuffE>:
didUnstuffE:
    lsr     x3          ;[08]
 204:	46 95       	lsr	r20
    lsr     x3          ;[09]
 206:	46 95       	lsr	r20

00000208 <rxbit1>:
rxbit1:
    in      x2, USBIN   ;[00] [10] <-- sample bit 1/3/5
 208:	10 b3       	in	r17, 0x10	; 16
    andi    x2, USBMASK ;[01]
 20a:	14 71       	andi	r17, 0x14	; 20
    breq    se0         ;[02]
 20c:	79 f0       	breq	.+30     	; 0x22c <se0>
    eor     x1, x2      ;[03]
 20e:	01 27       	eor	r16, r17
    subi    x1, 1       ;[04]
 210:	01 50       	subi	r16, 0x01	; 1
    ror     shift       ;[05]
 212:	27 95       	ror	r18
    cpi     shift, 0xfc ;[06]
 214:	2c 3f       	cpi	r18, 0xFC	; 252
    brcc    unstuffOdd  ;[07]
 216:	98 f6       	brcc	.-90     	; 0x1be <unstuffOdd>

00000218 <didUnstuffO>:
didUnstuffO:
    subi    bitcnt, 0xab;[08] == addi 0x55, 0x55 = 0x100/3
 218:	6b 5a       	subi	r22, 0xAB	; 171
    brcs    rxBitLoop   ;[09]
 21a:	60 f3       	brcs	.-40     	; 0x1f4 <rxBitLoop>

    subi    cnt, 1      ;[10]
 21c:	31 50       	subi	r19, 0x01	; 1
    in      x1, USBIN   ;[00] [11] <-- sample bit 6
 21e:	00 b3       	in	r16, 0x10	; 16
    brcc    rxByteLoop  ;[01]
 220:	b0 f6       	brcc	.-84     	; 0x1ce <rxByteLoop>
    rjmp    overflow
 222:	00 c0       	rjmp	.+0      	; 0x224 <overflow>

00000224 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 224:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 226:	1a bf       	out	0x3a, r17	; 58

00000228 <ignorePacket>:
ignorePacket:
    clr     token
 228:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 22a:	19 c0       	rjmp	.+50     	; 0x25e <handleSetupOrOut>

0000022c <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 22c:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 22e:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 230:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 232:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 234:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 236:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
 238:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 23a:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 23c:	09 f1       	breq	.+66     	; 0x280 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 23e:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 240:	f9 f0       	breq	.+62     	; 0x280 <handleData>
    lds     shift, usbDeviceAddr;[17]
 242:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <usbDeviceAddr>
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 246:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 248:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 24a:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 24c:	ed cf       	rjmp	.-38     	; 0x228 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 24e:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 250:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 252:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 254:	51 f1       	breq	.+84     	; 0x2aa <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 256:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 258:	11 f0       	breq	.+4      	; 0x25e <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 25a:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 25c:	29 f7       	brne	.-54     	; 0x228 <ignorePacket>

0000025e <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 25e:	00 93 8c 00 	sts	0x008C, r16	; 0x80008c <usbCurrentTok>

00000262 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 262:	3f 91       	pop	r19
 264:	5f 91       	pop	r21
 266:	4f 91       	pop	r20
 268:	1f 91       	pop	r17
 26a:	0f 91       	pop	r16
 26c:	2f 91       	pop	r18
 26e:	6f 91       	pop	r22
    USB_LOAD_PENDING(YL)        ;[49]
 270:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 272:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 274:	65 cf       	rjmp	.-310    	; 0x140 <waitForJ>

00000276 <sofError>:
sofError:
    POP_RETI                    ;macro call
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	cf bf       	out	0x3f, r28	; 63
 27c:	cf 91       	pop	r28
    reti
 27e:	18 95       	reti

00000280 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 280:	20 91 8c 00 	lds	r18, 0x008C	; 0x80008c <usbCurrentTok>
    tst     shift               ;[20]
 284:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 286:	69 f3       	breq	.-38     	; 0x262 <doReturn>
    lds     x2, usbRxLen        ;[22]
 288:	10 91 8a 00 	lds	r17, 0x008A	; 0x80008a <usbRxLen>
    tst     x2                  ;[24]
 28c:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 28e:	91 f5       	brne	.+100    	; 0x2f4 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 290:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 292:	92 f1       	brmi	.+100    	; 0x2f8 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 294:	30 93 8a 00 	sts	0x008A, r19	; 0x80008a <usbRxLen>
    sts     usbRxToken, shift   ;[30]
 298:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <usbRxToken>
    lds     x2, usbInputBufOffset;[32] swap buffers
 29c:	10 91 87 00 	lds	r17, 0x0087	; 0x800087 <usbInputBufOffset>
    ldi     cnt, USB_BUFSIZE    ;[34]
 2a0:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 2a2:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 2a4:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <usbInputBufOffset>
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 2a8:	27 c0       	rjmp	.+78     	; 0x2f8 <sendAckAndReti>

000002aa <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 2aa:	00 91 8a 00 	lds	r16, 0x008A	; 0x80008a <usbRxLen>
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 2ae:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 2b0:	0c f5       	brge	.+66     	; 0x2f4 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 2b2:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 2b4:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 2b6:	49 f4       	brne	.+18     	; 0x2ca <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 2b8:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <usbTxLen>
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 2bc:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 2be:	1d c0       	rjmp	.+58     	; 0x2fa <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 2c0:	00 93 62 00 	sts	0x0062, r16	; 0x800062 <usbTxLen>
    ldi     YL, lo8(usbTxBuf)   ;[43]
 2c4:	ce e6       	ldi	r28, 0x6E	; 110
    ldi     YH, hi8(usbTxBuf)   ;[44]
 2c6:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 2c8:	1c c0       	rjmp	.+56     	; 0x302 <usbSendAndReti>

000002ca <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
 2ca:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <usbTxStatus1>
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 2ce:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 2d0:	14 c0       	rjmp	.+40     	; 0x2fa <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 2d2:	00 93 79 00 	sts	0x0079, r16	; 0x800079 <usbTxStatus1>
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 2d6:	ca e7       	ldi	r28, 0x7A	; 122
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 2d8:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 2da:	13 c0       	rjmp	.+38     	; 0x302 <usbSendAndReti>

000002dc <bitstuffN>:
; J = (D+ = 0), (D- = 1)
; K = (D+ = 1), (D- = 0)
; Spec allows 7.5 bit times from EOP to SOP for replies

bitstuffN:
    eor     x1, x4          ;[5]
 2dc:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6]
 2de:	10 e0       	ldi	r17, 0x00	; 0
    nop2                    ;[7]
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <bitstuffN+0x6>
    nop                     ;[9]
 2e2:	00 00       	nop
    out     USBOUT, x1      ;[10] <-- out
 2e4:	02 bb       	out	0x12, r16	; 18
    rjmp    didStuffN       ;[0]
 2e6:	1a c0       	rjmp	.+52     	; 0x31c <didStuffN>

000002e8 <bitstuff6>:
    
bitstuff6:
    eor     x1, x4          ;[5]
 2e8:	05 27       	eor	r16, r21
    ldi     x2, 0           ;[6] Carry is zero due to brcc
 2ea:	10 e0       	ldi	r17, 0x00	; 0
    rol     shift           ;[7] compensate for ror shift at branch destination
 2ec:	22 1f       	adc	r18, r18
    rjmp    didStuff6       ;[8]
 2ee:	1d c0       	rjmp	.+58     	; 0x32a <didStuff6>

000002f0 <bitstuff7>:

bitstuff7:
    ldi     x2, 0           ;[2] Carry is zero due to brcc
 2f0:	10 e0       	ldi	r17, 0x00	; 0
    rjmp    didStuff7       ;[3]
 2f2:	21 c0       	rjmp	.+66     	; 0x336 <didStuff7>

000002f4 <sendNakAndReti>:


sendNakAndReti:
    ldi     x3, USBPID_NAK  ;[-18]
 2f4:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    sendX3AndReti   ;[-17]
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <sendX3AndReti>

000002f8 <sendAckAndReti>:
sendAckAndReti:
    ldi     cnt, USBPID_ACK ;[-17]
 2f8:	32 ed       	ldi	r19, 0xD2	; 210

000002fa <sendCntAndReti>:
sendCntAndReti:
    mov     x3, cnt         ;[-16]
 2fa:	43 2f       	mov	r20, r19

000002fc <sendX3AndReti>:
sendX3AndReti:
    ldi     YL, 20          ;[-15] x3==r20 address is 20
 2fc:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0           ;[-14]
 2fe:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2          ;[-13]
 300:	32 e0       	ldi	r19, 0x02	; 2

00000302 <usbSendAndReti>:
;uses: x1...x4, btcnt, shift, cnt, Y
;Numbers in brackets are time since first bit of sync pattern is sent
;We don't match the transfer rate exactly (don't insert leap cycles every third
;byte) because the spec demands only 1.5% precision anyway.
usbSendAndReti:             ; 12 cycles until SOP
    in      x2, USBDDR      ;[-12]
 302:	11 b3       	in	r17, 0x11	; 17
    ori     x2, USBMASK     ;[-11]
 304:	14 61       	ori	r17, 0x14	; 20
    sbi     USBOUT, USBMINUS;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 306:	92 9a       	sbi	0x12, 2	; 18
    in      x1, USBOUT      ;[-8] port mirror for tx loop
 308:	02 b3       	in	r16, 0x12	; 18
    out     USBDDR, x2      ;[-7] <- acquire bus
 30a:	11 bb       	out	0x11, r17	; 17
; need not init x2 (bitstuff history) because sync starts with 0
    ldi     x4, USBMASK     ;[-6] exor mask
 30c:	54 e1       	ldi	r21, 0x14	; 20
    ldi     shift, 0x80     ;[-5] sync byte is first byte sent
 30e:	20 e8       	ldi	r18, 0x80	; 128

00000310 <txByteLoop>:
txByteLoop:
    ldi     bitcnt, 0x35    ;[-4] [6] binary 0011 0101
 310:	65 e3       	ldi	r22, 0x35	; 53

00000312 <txBitLoop>:
txBitLoop:
    sbrs    shift, 0        ;[-3] [7]
 312:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[-2] [8]
 314:	05 27       	eor	r16, r21
    out     USBOUT, x1      ;[-1] [9] <-- out N
 316:	02 bb       	out	0x12, r16	; 18
    ror     shift           ;[0] [10]
 318:	27 95       	ror	r18
    ror     x2              ;[1]
 31a:	17 95       	ror	r17

0000031c <didStuffN>:
didStuffN:
    cpi     x2, 0xfc        ;[2]
 31c:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuffN       ;[3]
 31e:	f0 f6       	brcc	.-68     	; 0x2dc <bitstuffN>
    lsr     bitcnt          ;[4]
 320:	66 95       	lsr	r22
    brcc    txBitLoop       ;[5]
 322:	b8 f7       	brcc	.-18     	; 0x312 <txBitLoop>
    brne    txBitLoop       ;[6]
 324:	b1 f7       	brne	.-20     	; 0x312 <txBitLoop>

    sbrs    shift, 0        ;[7]
 326:	20 ff       	sbrs	r18, 0
    eor     x1, x4          ;[8]
 328:	05 27       	eor	r16, r21

0000032a <didStuff6>:
didStuff6:
    out     USBOUT, x1      ;[-1] [9] <-- out 6
 32a:	02 bb       	out	0x12, r16	; 18
    ror     shift           ;[0] [10]
 32c:	27 95       	ror	r18
    ror     x2              ;[1]
 32e:	17 95       	ror	r17
    cpi     x2, 0xfc        ;[2]
 330:	1c 3f       	cpi	r17, 0xFC	; 252
    brcc    bitstuff6       ;[3]
 332:	d0 f6       	brcc	.-76     	; 0x2e8 <bitstuff6>
    ror     shift           ;[4]
 334:	27 95       	ror	r18

00000336 <didStuff7>:
didStuff7:
    ror     x2              ;[5]
 336:	17 95       	ror	r17
    sbrs    x2, 7           ;[6]
 338:	17 ff       	sbrs	r17, 7
    eor     x1, x4          ;[7]
 33a:	05 27       	eor	r16, r21
    nop                     ;[8]
 33c:	00 00       	nop
    cpi     x2, 0xfc        ;[9]
 33e:	1c 3f       	cpi	r17, 0xFC	; 252
    out     USBOUT, x1      ;[-1][10] <-- out 7
 340:	02 bb       	out	0x12, r16	; 18
    brcc    bitstuff7       ;[0] [11]
 342:	b0 f6       	brcc	.-84     	; 0x2f0 <bitstuff7>
    ld      shift, y+       ;[1]
 344:	29 91       	ld	r18, Y+
    dec     cnt             ;[3]
 346:	3a 95       	dec	r19
    brne    txByteLoop      ;[4]
 348:	19 f7       	brne	.-58     	; 0x310 <txByteLoop>
;make SE0:
    cbr     x1, USBMASK     ;[5] prepare SE0 [spec says EOP may be 21 to 25 cycles]
 34a:	0b 7e       	andi	r16, 0xEB	; 235
    lds     x2, usbNewDeviceAddr;[6]
 34c:	10 91 8b 00 	lds	r17, 0x008B	; 0x80008b <usbNewDeviceAddr>
    lsl     x2              ;[8] we compare with left shifted address
 350:	11 0f       	add	r17, r17
    subi    YL, 20 + 2      ;[9] Only assign address on data packets, not ACK/NAK in x3
 352:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0           ;[10]
 354:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1      ;[11] <-- out SE0 -- from now 2 bits = 22 cycles until bus idle
 356:	02 bb       	out	0x12, r16	; 18
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign  ;[0]
 358:	11 f0       	breq	.+4      	; 0x35e <skipAddrAssign>
    sts     usbDeviceAddr, x2; if not skipped: SE0 is one cycle longer
 35a:	10 93 85 00 	sts	0x0085, r17	; 0x800085 <usbDeviceAddr>

0000035e <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[2] int0 occurred during TX -- clear pending flag
 35e:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)   ;[3]
 360:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE     ;[4]
 362:	04 60       	ori	r16, 0x04	; 4
    in      x2, USBDDR      ;[5]
 364:	11 b3       	in	r17, 0x11	; 17
    cbr     x2, USBMASK     ;[6] set both pins to input
 366:	1b 7e       	andi	r17, 0xEB	; 235
    mov     x3, x1          ;[7]
 368:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK     ;[8] configure no pullup on both pins
 36a:	4b 7e       	andi	r20, 0xEB	; 235
    ldi     x4, 4           ;[9]
 36c:	54 e0       	ldi	r21, 0x04	; 4

0000036e <se0Delay>:
se0Delay:
    dec     x4              ;[10] [13] [16] [19]
 36e:	5a 95       	dec	r21
    brne    se0Delay        ;[11] [14] [17] [20]
 370:	f1 f7       	brne	.-4      	; 0x36e <se0Delay>
    out     USBOUT, x1      ;[21] <-- out J (idle) -- end of SE0 (EOP signal)
 372:	02 bb       	out	0x12, r16	; 18
    out     USBDDR, x2      ;[22] <-- release bus now
 374:	11 bb       	out	0x11, r17	; 17
    out     USBOUT, x3      ;[23] <-- ensure no pull-up resistors are active
 376:	42 bb       	out	0x12, r20	; 18
    rjmp    doReturn
 378:	74 cf       	rjmp	.-280    	; 0x262 <doReturn>

0000037a <__vector_2>:
volatile int8_t Encoder_;
static uint8_t Encoder_Prev;
int8_t Encoder = 0;
  
ISR(ENC_CLK_IRQ)
{
 37a:	1f 92       	push	r1
 37c:	0f 92       	push	r0
 37e:	0f b6       	in	r0, 0x3f	; 63
 380:	0f 92       	push	r0
 382:	11 24       	eor	r1, r1
 384:	8f 93       	push	r24
 386:	9f 93       	push	r25
  uint8_t Enc_Status;

  Enc_Status = (REG(ENC_CLK_PORT,PIN) & ENC_CLK)|(REG(ENC_PORT,PIN) & ENC_DT);
 388:	80 b3       	in	r24, 0x10	; 16
 38a:	93 b3       	in	r25, 0x13	; 19
 38c:	91 70       	andi	r25, 0x01	; 1
 38e:	88 70       	andi	r24, 0x08	; 8
 390:	89 2b       	or	r24, r25
  sei();
 392:	78 94       	sei
  
  // allow interrupt nesting after this point  
  if((Encoder_Prev == ENC_DT) && (Enc_Status == ENC_CLK))
 394:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Encoder_Prev>
 398:	91 30       	cpi	r25, 0x01	; 1
 39a:	41 f4       	brne	.+16     	; 0x3ac <__vector_2+0x32>
 39c:	88 30       	cpi	r24, 0x08	; 8
 39e:	79 f4       	brne	.+30     	; 0x3be <__vector_2+0x44>
    Encoder_--;    
 3a0:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Encoder_>
 3a4:	91 50       	subi	r25, 0x01	; 1
 3a6:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <Encoder_>
 3aa:	09 c0       	rjmp	.+18     	; 0x3be <__vector_2+0x44>
  else if((!Encoder_Prev) && (Enc_Status == (ENC_CLK|ENC_DT)))
 3ac:	91 11       	cpse	r25, r1
 3ae:	07 c0       	rjmp	.+14     	; 0x3be <__vector_2+0x44>
 3b0:	89 30       	cpi	r24, 0x09	; 9
 3b2:	29 f4       	brne	.+10     	; 0x3be <__vector_2+0x44>
    Encoder_++;
 3b4:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <Encoder_>
 3b8:	9f 5f       	subi	r25, 0xFF	; 255
 3ba:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <Encoder_>

  Encoder_Prev = Enc_Status;
 3be:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <Encoder_Prev>
}
 3c2:	9f 91       	pop	r25
 3c4:	8f 91       	pop	r24
 3c6:	0f 90       	pop	r0
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	0f 90       	pop	r0
 3cc:	1f 90       	pop	r1
 3ce:	18 95       	reti

000003d0 <Timer_Task>:
static uint8_t Switch_Status = SW_EDGE_MASK, Sw_Timer, Sw_State = SW_NONE, Enc_State = ENC_VOLUME;

void Timer_Task(void)
{
  // timer0 overflow IRQ doesn't work nicely with V-USB, so use polling loop
  if(TIFR & (1<<TOV0))
 3d0:	08 b6       	in	r0, 0x38	; 56
 3d2:	00 fe       	sbrs	r0, 0
 3d4:	a3 c0       	rjmp	.+326    	; 0x51c <__stack+0xbd>
  {
    // clears Timer 0 overflow flag
    TIFR = (1<<TOV0);                     
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	88 bf       	out	0x38, r24	; 56
  
    if(Sw_Timer)
 3da:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Sw_Timer>
 3de:	88 23       	and	r24, r24
 3e0:	19 f0       	breq	.+6      	; 0x3e8 <Timer_Task+0x18>
      Sw_Timer--;
 3e2:	81 50       	subi	r24, 0x01	; 1
 3e4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Sw_Timer>

    // keep track of switch by storing history in a shift register
    Switch_Status <<= 1;
 3e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 3ec:	88 0f       	add	r24, r24
 3ee:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
  
    if(REG(ENC_PORT,PIN) & ENC_SWITCH)
 3f2:	99 9b       	sbis	0x13, 1	; 19
 3f4:	03 c0       	rjmp	.+6      	; 0x3fc <Timer_Task+0x2c>
      Switch_Status |= 1;
 3f6:	81 60       	ori	r24, 0x01	; 1
 3f8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    
    // key press state machine
    switch(Sw_State)
 3fc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Sw_State>
 400:	82 30       	cpi	r24, 0x02	; 2
 402:	09 f4       	brne	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 404:	44 c0       	rjmp	.+136    	; 0x48e <__stack+0x2f>
 406:	28 f4       	brcc	.+10     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 408:	88 23       	and	r24, r24
 40a:	61 f0       	breq	.+24     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 40c:	81 30       	cpi	r24, 0x01	; 1
 40e:	b9 f0       	breq	.+46     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 410:	08 95       	ret
 412:	84 30       	cpi	r24, 0x04	; 4
 414:	09 f4       	brne	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 416:	5d c0       	rjmp	.+186    	; 0x4d2 <__stack+0x73>
 418:	08 f4       	brcc	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41a:	49 c0       	rjmp	.+146    	; 0x4ae <__stack+0x4f>
 41c:	85 30       	cpi	r24, 0x05	; 5
 41e:	09 f4       	brne	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 420:	76 c0       	rjmp	.+236    	; 0x50e <__stack+0xaf>
 422:	08 95       	ret
    {
      case SW_NONE:
        if(SW_AT_MAKE)
 424:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 428:	8f 70       	andi	r24, 0x0F	; 15
 42a:	88 30       	cpi	r24, 0x08	; 8
 42c:	09 f0       	breq	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42e:	76 c0       	rjmp	.+236    	; 0x51c <__stack+0xbd>
        {
          Sw_State = SW_PRESS;
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Sw_State>
          Sw_Timer = TIMER_CLICK_MAKE;
 436:	89 e0       	ldi	r24, 0x09	; 9
 438:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Sw_Timer>
 43c:	08 95       	ret
        }
        break;

      case SW_PRESS:
        if(!Sw_Timer)                                 // Double click times out -> Pressed
 43e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Sw_Timer>
 442:	81 11       	cpse	r24, r1
 444:	17 c0       	rjmp	.+46     	; 0x474 <__stack+0x15>
        {                                             
          if(Report_State == REPORT_RDY)              // cheat: wait for HID to be ready
 446:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Report_State>
 44a:	81 11       	cpse	r24, r1
 44c:	67 c0       	rjmp	.+206    	; 0x51c <__stack+0xbd>
          {
            Sw_State = SW_HOLD;
 44e:	84 e0       	ldi	r24, 0x04	; 4
 450:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Sw_State>
            Sw_Timer = TIMER_LONG;
 454:	89 e1       	ldi	r24, 0x19	; 25
 456:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Sw_Timer>
          
            // normal click
            ReportIn[1] = (Enc_State == ENC_VOLUME)?Cmd_Mute:Cmd_Play_Pause;
 45a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 45e:	88 23       	and	r24, r24
 460:	11 f0       	breq	.+4      	; 0x466 <__stack+0x7>
 462:	88 e0       	ldi	r24, 0x08	; 8
 464:	01 c0       	rjmp	.+2      	; 0x468 <__stack+0x9>
 466:	80 e1       	ldi	r24, 0x10	; 16
 468:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <ReportIn+0x1>
            Report_State = REPORT_CMD;
 46c:	82 e0       	ldi	r24, 0x02	; 2
 46e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Report_State>
 472:	08 95       	ret
          }          
        }
        else if (SW_BREAK)
 474:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 478:	83 70       	andi	r24, 0x03	; 3
 47a:	83 30       	cpi	r24, 0x03	; 3
 47c:	09 f0       	breq	.+2      	; 0x480 <__stack+0x21>
 47e:	4e c0       	rjmp	.+156    	; 0x51c <__stack+0xbd>
        {
          Sw_State = SW_DBL_BREAK;
 480:	82 e0       	ldi	r24, 0x02	; 2
 482:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Sw_State>
          Sw_Timer = TIMER_DBL_BREAK;
 486:	8f e0       	ldi	r24, 0x0F	; 15
 488:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Sw_Timer>
 48c:	08 95       	ret
        }           
        break;
      
      case SW_DBL_BREAK:
        if(!Sw_Timer)                                 // break is too long, treat it as no pressed
 48e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Sw_Timer>
 492:	81 11       	cpse	r24, r1
 494:	03 c0       	rjmp	.+6      	; 0x49c <__stack+0x3d>
          Sw_State = SW_NONE;
 496:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <Sw_State>
 49a:	08 95       	ret
        else if(SW_AT_MAKE)
 49c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 4a0:	8f 70       	andi	r24, 0x0F	; 15
 4a2:	88 30       	cpi	r24, 0x08	; 8
 4a4:	d9 f5       	brne	.+118    	; 0x51c <__stack+0xbd>
          Sw_State = SW_DBL_CLICK; 
 4a6:	83 e0       	ldi	r24, 0x03	; 3
 4a8:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Sw_State>
 4ac:	08 95       	ret
        break;

      case SW_DBL_CLICK:
        // handle double click here
        LED_TOGGLE(LED_GREEN_N);
 4ae:	95 b3       	in	r25, 0x15	; 21
 4b0:	84 e0       	ldi	r24, 0x04	; 4
 4b2:	89 27       	eor	r24, r25
 4b4:	85 bb       	out	0x15, r24	; 21
        Enc_State = !Enc_State;
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <__data_end>
 4bc:	91 11       	cpse	r25, r1
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
          
        Sw_Timer = TIMER_LONG;
 4c4:	89 e1       	ldi	r24, 0x19	; 25
 4c6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Sw_Timer>
        Sw_State = SW_BREAK_WAIT;        
 4ca:	85 e0       	ldi	r24, 0x05	; 5
 4cc:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Sw_State>
        break;
 4d0:	08 95       	ret
      
      case SW_HOLD:
        if(!Sw_Timer)                                 // Long press
 4d2:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <Sw_Timer>
 4d6:	91 11       	cpse	r25, r1
 4d8:	12 c0       	rjmp	.+36     	; 0x4fe <__stack+0x9f>
        {
          if(Report_State == REPORT_RDY)              // cheat: wait to HID to be ready
 4da:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <Report_State>
 4de:	91 11       	cpse	r25, r1
 4e0:	1d c0       	rjmp	.+58     	; 0x51c <__stack+0xbd>
          {
            ReportIn[1] = (Enc_State == ENC_VOLUME)?Cmd_Play_Pause:Cmd_Stop;
 4e2:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <__data_end>
 4e6:	91 11       	cpse	r25, r1
 4e8:	01 c0       	rjmp	.+2      	; 0x4ec <__stack+0x8d>
 4ea:	88 e0       	ldi	r24, 0x08	; 8
 4ec:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <ReportIn+0x1>
            Sw_State = SW_BREAK_WAIT;          
 4f0:	85 e0       	ldi	r24, 0x05	; 5
 4f2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Sw_State>
            Report_State = REPORT_CMD;
 4f6:	82 e0       	ldi	r24, 0x02	; 2
 4f8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Report_State>
 4fc:	08 95       	ret
          }                     
        }
        else if (SW_BREAK)
 4fe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 502:	83 70       	andi	r24, 0x03	; 3
 504:	83 30       	cpi	r24, 0x03	; 3
 506:	51 f4       	brne	.+20     	; 0x51c <__stack+0xbd>
          Sw_State = SW_NONE;
 508:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <Sw_State>
 50c:	08 95       	ret
        break;
        
      case SW_BREAK_WAIT:
        if (SW_BREAK)
 50e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 512:	83 70       	andi	r24, 0x03	; 3
 514:	83 30       	cpi	r24, 0x03	; 3
 516:	11 f4       	brne	.+4      	; 0x51c <__stack+0xbd>
          Sw_State = SW_NONE;
 518:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <Sw_State>
 51c:	08 95       	ret

0000051e <Encoder_Task>:
  }
}

void Encoder_Task(void)
{
  if(Report_State == REPORT_RDY)
 51e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Report_State>
 522:	81 11       	cpse	r24, r1
 524:	3a c0       	rjmp	.+116    	; 0x59a <Encoder_Task+0x7c>
  {
    if(Encoder_)              // Update Encoder from IRQ value
 526:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <Encoder_>
 52a:	88 23       	and	r24, r24
 52c:	59 f0       	breq	.+22     	; 0x544 <Encoder_Task+0x26>
    {
      uint8_t Encoder_IRQ;
      
      cli();                  // disable interrupt and gain access to Encoder_Count
 52e:	f8 94       	cli
      Encoder_IRQ = Encoder_; // Keep it very short
 530:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <Encoder_>
      Encoder_ = 0;
 534:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <Encoder_>
      sei();
 538:	78 94       	sei
      
      Encoder += Encoder_IRQ;
 53a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <Encoder>
 53e:	89 0f       	add	r24, r25
 540:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Encoder>
    }
    
    // report delta value as a series of Inc/Dec events
    if(Encoder >0)
 544:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Encoder>
 548:	18 16       	cp	r1, r24
 54a:	9c f4       	brge	.+38     	; 0x572 <Encoder_Task+0x54>
    {
      Encoder--;
 54c:	81 50       	subi	r24, 0x01	; 1
 54e:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Encoder>
      ReportIn[1]|= (Enc_State == ENC_VOLUME)?Cmd_Volume_Up:Cmd_Next_Track;
 552:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <ReportIn+0x1>
 556:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <__data_end>
 55a:	99 23       	and	r25, r25
 55c:	11 f0       	breq	.+4      	; 0x562 <Encoder_Task+0x44>
 55e:	91 e0       	ldi	r25, 0x01	; 1
 560:	01 c0       	rjmp	.+2      	; 0x564 <Encoder_Task+0x46>
 562:	90 e2       	ldi	r25, 0x20	; 32
 564:	89 2b       	or	r24, r25
 566:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <ReportIn+0x1>
      Report_State = REPORT_CMD;
 56a:	82 e0       	ldi	r24, 0x02	; 2
 56c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Report_State>
 570:	08 95       	ret
    }
    else if (Encoder <0)
 572:	88 23       	and	r24, r24
 574:	94 f4       	brge	.+36     	; 0x59a <Encoder_Task+0x7c>
    {
      Encoder++;
 576:	8f 5f       	subi	r24, 0xFF	; 255
 578:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Encoder>
      ReportIn[1]|= (Enc_State == ENC_VOLUME)?Cmd_Volume_Down:Cmd_Prev_Track;
 57c:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <ReportIn+0x1>
 580:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <__data_end>
 584:	99 23       	and	r25, r25
 586:	11 f0       	breq	.+4      	; 0x58c <Encoder_Task+0x6e>
 588:	92 e0       	ldi	r25, 0x02	; 2
 58a:	01 c0       	rjmp	.+2      	; 0x58e <Encoder_Task+0x70>
 58c:	90 e4       	ldi	r25, 0x40	; 64
 58e:	89 2b       	or	r24, r25
 590:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <ReportIn+0x1>
      Report_State = REPORT_CMD;
 594:	82 e0       	ldi	r24, 0x02	; 2
 596:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Report_State>
 59a:	08 95       	ret

0000059c <HID_Task>:
  }    
}    

void HID_Task(void)
{
  if ((Report_State != REPORT_RDY) && (usbInterruptIsReady()))
 59c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Report_State>
 5a0:	88 23       	and	r24, r24
 5a2:	c1 f0       	breq	.+48     	; 0x5d4 <HID_Task+0x38>
 5a4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <usbTxStatus1>
 5a8:	94 ff       	sbrs	r25, 4
 5aa:	14 c0       	rjmp	.+40     	; 0x5d4 <HID_Task+0x38>
  {
    switch(Report_State)
 5ac:	81 30       	cpi	r24, 0x01	; 1
 5ae:	51 f0       	breq	.+20     	; 0x5c4 <HID_Task+0x28>
 5b0:	82 30       	cpi	r24, 0x02	; 2
 5b2:	81 f4       	brne	.+32     	; 0x5d4 <HID_Task+0x38>
    {
      case REPORT_CMD:
        usbSetInterrupt((void *)ReportIn,REPORT_SIZE);
 5b4:	62 e0       	ldi	r22, 0x02	; 2
 5b6:	8c e6       	ldi	r24, 0x6C	; 108
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	41 d0       	rcall	.+130    	; 0x63e <usbSetInterrupt>
        Report_State = REPORT_CMD_RELEASE;
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Report_State>
        break;
 5c2:	08 95       	ret
        
      case REPORT_CMD_RELEASE:
        // clear all bits in report
        ReportIn[1] = 0;
 5c4:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <ReportIn+0x1>
        usbSetInterrupt((void *)ReportIn,REPORT_SIZE);
 5c8:	62 e0       	ldi	r22, 0x02	; 2
 5ca:	8c e6       	ldi	r24, 0x6C	; 108
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	37 d0       	rcall	.+110    	; 0x63e <usbSetInterrupt>
        Report_State = REPORT_RDY;
 5d0:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <Report_State>
 5d4:	08 95       	ret

000005d6 <Init_HW>:
  }
}

void Init_HW(void)
{ 
  LED_OFF(LED_AMBER_N|LED_GREEN_N);
 5d6:	85 b3       	in	r24, 0x15	; 21
 5d8:	8c 60       	ori	r24, 0x0C	; 12
 5da:	85 bb       	out	0x15, r24	; 21
  REG(LED_PORT,PORT) |= LED_AMBER_N|LED_GREEN_N;
 5dc:	85 b3       	in	r24, 0x15	; 21
 5de:	8c 60       	ori	r24, 0x0C	; 12
 5e0:	85 bb       	out	0x15, r24	; 21
  
  // Set unused GPIO to output
  DDRB = DDRB_INIT;
 5e2:	8f ef       	ldi	r24, 0xFF	; 255
 5e4:	87 bb       	out	0x17, r24	; 23
  DDRC = DDRC_INIT;
 5e6:	8c ef       	ldi	r24, 0xFC	; 252
 5e8:	84 bb       	out	0x14, r24	; 20
  DDRD = DDRD_INIT;
 5ea:	80 ee       	ldi	r24, 0xE0	; 224
 5ec:	81 bb       	out	0x11, r24	; 17

  // Timer 0 = 16MHz/1024: 64us resolution, 16.384ms overflow
  TCCR0 = (1<<CS02)|(1<<CS00);
 5ee:	85 e0       	ldi	r24, 0x05	; 5
 5f0:	83 bf       	out	0x33, r24	; 51

  // INT1 = level change for encoder
  MCUCR |= (1<<ISC10);
 5f2:	85 b7       	in	r24, 0x35	; 53
 5f4:	84 60       	ori	r24, 0x04	; 4
 5f6:	85 bf       	out	0x35, r24	; 53
  GICR |= (1<<INT1);
 5f8:	8b b7       	in	r24, 0x3b	; 59
 5fa:	80 68       	ori	r24, 0x80	; 128
 5fc:	8b bf       	out	0x3b, r24	; 59
  
  ReportIn[0] = ID_CONSUMER;
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <ReportIn>
 604:	08 95       	ret

00000606 <main>:

#include "hardware.h"

int main(void)
{ 
  Init_HW();
 606:	e7 df       	rcall	.-50     	; 0x5d6 <Init_HW>
  
  usbInit();
 608:	67 d1       	rcall	.+718    	; 0x8d8 <usbInit>
  usbDeviceDisconnect();
 60a:	8a 9a       	sbi	0x11, 2	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 60c:	2f ef       	ldi	r18, 0xFF	; 255
 60e:	84 e3       	ldi	r24, 0x34	; 52
 610:	9c e0       	ldi	r25, 0x0C	; 12
 612:	21 50       	subi	r18, 0x01	; 1
 614:	80 40       	sbci	r24, 0x00	; 0
 616:	90 40       	sbci	r25, 0x00	; 0
 618:	e1 f7       	brne	.-8      	; 0x612 <main+0xc>
 61a:	00 c0       	rjmp	.+0      	; 0x61c <main+0x16>
 61c:	00 00       	nop
  _delay_ms(250);
  usbDeviceConnect();
 61e:	8a 98       	cbi	0x11, 2	; 17
  sei();				                      /* set global interrupt enable */ 
 620:	78 94       	sei
  
  // main event loop

  for(;;)
  {
    usbPoll();
 622:	2f d0       	rcall	.+94     	; 0x682 <usbPoll>
    HID_Task();
 624:	bb df       	rcall	.-138    	; 0x59c <HID_Task>
    Timer_Task();    
 626:	d4 de       	rcall	.-600    	; 0x3d0 <Timer_Task>
    Encoder_Task();
 628:	7a df       	rcall	.-268    	; 0x51e <Encoder_Task>
   }
 62a:	fb cf       	rjmp	.-10     	; 0x622 <main+0x1c>

0000062c <usbFunctionSetup>:

usbMsgLen_t usbFunctionSetup(uchar setupData[8])
{
  usbRequest_t *Request = (void *)setupData;   // cast to structured data for parsing
  
  if(Request->bRequest==USBRQ_HID_SET_REPORT)
 62c:	21 e0       	ldi	r18, 0x01	; 1
 62e:	fc 01       	movw	r30, r24
 630:	81 81       	ldd	r24, Z+1	; 0x01
 632:	89 30       	cpi	r24, 0x09	; 9
 634:	09 f0       	breq	.+2      	; 0x638 <usbFunctionSetup+0xc>
 636:	20 e0       	ldi	r18, 0x00	; 0
  else if (Request->bRequest==USBRQ_HID_GET_REPORT)
  { 
   }

  return 0;                               // ignore all unknown requests
}
 638:	82 2f       	mov	r24, r18
 63a:	81 95       	neg	r24
 63c:	08 95       	ret

0000063e <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 63e:	cf 93       	push	r28
 640:	c6 2f       	mov	r28, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 642:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <usbTxStatus1>
 646:	24 ff       	sbrs	r18, 4
 648:	07 c0       	rjmp	.+14     	; 0x658 <usbSetInterrupt+0x1a>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 64a:	e9 e7       	ldi	r30, 0x79	; 121
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	31 81       	ldd	r19, Z+1	; 0x01
 650:	28 e8       	ldi	r18, 0x88	; 136
 652:	23 27       	eor	r18, r19
 654:	21 83       	std	Z+1, r18	; 0x01
 656:	03 c0       	rjmp	.+6      	; 0x65e <usbSetInterrupt+0x20>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 658:	2a e5       	ldi	r18, 0x5A	; 90
 65a:	20 93 79 00 	sts	0x0079, r18	; 0x800079 <usbTxStatus1>
 65e:	e8 2f       	mov	r30, r24
 660:	f9 2f       	mov	r31, r25
 662:	ab e7       	ldi	r26, 0x7B	; 123
 664:	b0 e0       	ldi	r27, 0x00	; 0
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 666:	8c 2f       	mov	r24, r28
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 668:	91 91       	ld	r25, Z+
 66a:	9d 93       	st	X+, r25
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 66c:	81 50       	subi	r24, 0x01	; 1
 66e:	e1 f7       	brne	.-8      	; 0x668 <usbSetInterrupt+0x2a>
    usbCrc16Append(&txStatus->buffer[1], len);
 670:	6c 2f       	mov	r22, r28
 672:	8b e7       	ldi	r24, 0x7B	; 123
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	5c dd       	rcall	.-1352   	; 0x130 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 678:	cc 5f       	subi	r28, 0xFC	; 252
 67a:	c0 93 79 00 	sts	0x0079, r28	; 0x800079 <usbTxStatus1>
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 67e:	cf 91       	pop	r28
 680:	08 95       	ret

00000682 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 682:	cf 93       	push	r28
 684:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 686:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <usbRxLen>
 68a:	83 50       	subi	r24, 0x03	; 3
    if(len >= 0){
 68c:	0a f4       	brpl	.+2      	; 0x690 <usbPoll+0xe>
 68e:	be c0       	rjmp	.+380    	; 0x80c <usbPoll+0x18a>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 690:	20 91 87 00 	lds	r18, 0x0087	; 0x800087 <usbInputBufOffset>
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 694:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <usbRxToken>
 698:	9d 32       	cpi	r25, 0x2D	; 45
 69a:	09 f0       	breq	.+2      	; 0x69e <usbPoll+0x1c>
 69c:	b5 c0       	rjmp	.+362    	; 0x808 <usbPoll+0x186>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 69e:	88 30       	cpi	r24, 0x08	; 8
 6a0:	09 f0       	breq	.+2      	; 0x6a4 <usbPoll+0x22>
 6a2:	b2 c0       	rjmp	.+356    	; 0x808 <usbPoll+0x186>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 6a4:	cc e0       	ldi	r28, 0x0C	; 12
 6a6:	d0 e0       	ldi	r29, 0x00	; 0
 6a8:	c2 1b       	sub	r28, r18
 6aa:	d1 09       	sbc	r29, r1
 6ac:	c2 57       	subi	r28, 0x72	; 114
 6ae:	df 4f       	sbci	r29, 0xFF	; 255
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 6b0:	83 ec       	ldi	r24, 0xC3	; 195
 6b2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <usbTxBuf>
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 6b6:	8a e5       	ldi	r24, 0x5A	; 90
 6b8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <usbTxLen>
        usbMsgFlags = 0;
 6bc:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <usbMsgFlags>
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
 6c0:	88 81       	ld	r24, Y
 6c2:	80 76       	andi	r24, 0x60	; 96
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 6c4:	19 f0       	breq	.+6      	; 0x6cc <usbPoll+0x4a>
            replyLen = usbFunctionSetup(data);
 6c6:	ce 01       	movw	r24, r28
 6c8:	b1 df       	rcall	.-158    	; 0x62c <usbFunctionSetup>
 6ca:	95 c0       	rjmp	.+298    	; 0x7f6 <usbPoll+0x174>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 6cc:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 6ce:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <usbTxBuf+0x9>
    SWITCH_START(rq->bRequest)
 6d2:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 6d4:	81 11       	cpse	r24, r1
 6d6:	06 c0       	rjmp	.+12     	; 0x6e4 <usbPoll+0x62>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 6d8:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <usbTxBuf+0xa>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 6dc:	27 e7       	ldi	r18, 0x77	; 119
 6de:	30 e0       	ldi	r19, 0x00	; 0
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
 6e0:	82 e0       	ldi	r24, 0x02	; 2
 6e2:	85 c0       	rjmp	.+266    	; 0x7ee <usbPoll+0x16c>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 6e4:	85 30       	cpi	r24, 0x05	; 5
 6e6:	31 f4       	brne	.+12     	; 0x6f4 <usbPoll+0x72>
        usbNewDeviceAddr = value;
 6e8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <usbNewDeviceAddr>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 6ec:	27 e7       	ldi	r18, 0x77	; 119
 6ee:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	7d c0       	rjmp	.+250    	; 0x7ee <usbPoll+0x16c>
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 6f4:	86 30       	cpi	r24, 0x06	; 6
 6f6:	09 f0       	breq	.+2      	; 0x6fa <usbPoll+0x78>
 6f8:	5a c0       	rjmp	.+180    	; 0x7ae <usbPoll+0x12c>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 6fa:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 6fc:	81 30       	cpi	r24, 0x01	; 1
 6fe:	41 f4       	brne	.+16     	; 0x710 <usbPoll+0x8e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 700:	83 e7       	ldi	r24, 0x73	; 115
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <usbMsgPtr+0x1>
 708:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <usbMsgPtr>
 70c:	82 e1       	ldi	r24, 0x12	; 18
 70e:	4b c0       	rjmp	.+150    	; 0x7a6 <usbPoll+0x124>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 710:	82 30       	cpi	r24, 0x02	; 2
 712:	41 f4       	brne	.+16     	; 0x724 <usbPoll+0xa2>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 714:	81 e5       	ldi	r24, 0x51	; 81
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <usbMsgPtr+0x1>
 71c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <usbMsgPtr>
 720:	82 e2       	ldi	r24, 0x22	; 34
 722:	41 c0       	rjmp	.+130    	; 0x7a6 <usbPoll+0x124>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 724:	83 30       	cpi	r24, 0x03	; 3
 726:	41 f5       	brne	.+80     	; 0x778 <usbPoll+0xf6>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
 728:	91 11       	cpse	r25, r1
 72a:	08 c0       	rjmp	.+16     	; 0x73c <usbPoll+0xba>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 72c:	89 ec       	ldi	r24, 0xC9	; 201
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <usbMsgPtr+0x1>
 734:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <usbMsgPtr>
 738:	84 e0       	ldi	r24, 0x04	; 4
 73a:	35 c0       	rjmp	.+106    	; 0x7a6 <usbPoll+0x124>
        SWITCH_CASE(1)
 73c:	91 30       	cpi	r25, 0x01	; 1
 73e:	41 f4       	brne	.+16     	; 0x750 <usbPoll+0xce>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 740:	87 eb       	ldi	r24, 0xB7	; 183
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <usbMsgPtr+0x1>
 748:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <usbMsgPtr>
 74c:	82 e1       	ldi	r24, 0x12	; 18
 74e:	2b c0       	rjmp	.+86     	; 0x7a6 <usbPoll+0x124>
        SWITCH_CASE(2)
 750:	92 30       	cpi	r25, 0x02	; 2
 752:	41 f4       	brne	.+16     	; 0x764 <usbPoll+0xe2>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 754:	8f e8       	ldi	r24, 0x8F	; 143
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <usbMsgPtr+0x1>
 75c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <usbMsgPtr>
 760:	88 e2       	ldi	r24, 0x28	; 40
 762:	21 c0       	rjmp	.+66     	; 0x7a6 <usbPoll+0x124>
        SWITCH_CASE(3)
 764:	93 30       	cpi	r25, 0x03	; 3
 766:	e1 f4       	brne	.+56     	; 0x7a0 <usbPoll+0x11e>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER, usbDescriptorStringSerialNumber)
 768:	85 e8       	ldi	r24, 0x85	; 133
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <usbMsgPtr+0x1>
 770:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <usbMsgPtr>
 774:	8a e0       	ldi	r24, 0x0A	; 10
 776:	17 c0       	rjmp	.+46     	; 0x7a6 <usbPoll+0x124>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 778:	81 32       	cpi	r24, 0x21	; 33
 77a:	41 f4       	brne	.+16     	; 0x78c <usbPoll+0x10a>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 77c:	83 e6       	ldi	r24, 0x63	; 99
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <usbMsgPtr+0x1>
 784:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <usbMsgPtr>
 788:	89 e0       	ldi	r24, 0x09	; 9
 78a:	0d c0       	rjmp	.+26     	; 0x7a6 <usbPoll+0x124>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 78c:	82 32       	cpi	r24, 0x22	; 34
 78e:	51 f4       	brne	.+20     	; 0x7a4 <usbPoll+0x122>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 790:	86 e2       	ldi	r24, 0x26	; 38
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <usbMsgPtr+0x1>
 798:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <usbMsgPtr>
 79c:	8b e2       	ldi	r24, 0x2B	; 43
 79e:	03 c0       	rjmp	.+6      	; 0x7a6 <usbPoll+0x124>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	01 c0       	rjmp	.+2      	; 0x7a6 <usbPoll+0x124>
 7a4:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 7a6:	90 e4       	ldi	r25, 0x40	; 64
 7a8:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <usbMsgFlags>
 7ac:	24 c0       	rjmp	.+72     	; 0x7f6 <usbPoll+0x174>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 7ae:	88 30       	cpi	r24, 0x08	; 8
 7b0:	99 f0       	breq	.+38     	; 0x7d8 <usbPoll+0x156>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 7b2:	89 30       	cpi	r24, 0x09	; 9
 7b4:	31 f4       	brne	.+12     	; 0x7c2 <usbPoll+0x140>
        usbConfiguration = value;
 7b6:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <usbConfiguration>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 7ba:	27 e7       	ldi	r18, 0x77	; 119
 7bc:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 7be:	80 e0       	ldi	r24, 0x00	; 0
 7c0:	16 c0       	rjmp	.+44     	; 0x7ee <usbPoll+0x16c>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 7c2:	8a 30       	cpi	r24, 0x0A	; 10
 7c4:	69 f0       	breq	.+26     	; 0x7e0 <usbPoll+0x15e>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 7c6:	8b 30       	cpi	r24, 0x0B	; 11
 7c8:	79 f4       	brne	.+30     	; 0x7e8 <usbPoll+0x166>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 7ca:	8b e4       	ldi	r24, 0x4B	; 75
 7cc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <usbTxStatus1+0x1>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 7d0:	27 e7       	ldi	r18, 0x77	; 119
 7d2:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 7d4:	80 e0       	ldi	r24, 0x00	; 0
 7d6:	0b c0       	rjmp	.+22     	; 0x7ee <usbPoll+0x16c>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
 7d8:	2d e8       	ldi	r18, 0x8D	; 141
 7da:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
 7dc:	81 e0       	ldi	r24, 0x01	; 1
 7de:	07 c0       	rjmp	.+14     	; 0x7ee <usbPoll+0x16c>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 7e0:	27 e7       	ldi	r18, 0x77	; 119
 7e2:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	03 c0       	rjmp	.+6      	; 0x7ee <usbPoll+0x16c>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 7e8:	27 e7       	ldi	r18, 0x77	; 119
 7ea:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 7ec:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = dataPtr;
 7ee:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <usbMsgPtr+0x1>
 7f2:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <usbMsgPtr>
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 7f6:	9f 81       	ldd	r25, Y+7	; 0x07
 7f8:	91 11       	cpse	r25, r1
 7fa:	04 c0       	rjmp	.+8      	; 0x804 <usbPoll+0x182>
 7fc:	9e 81       	ldd	r25, Y+6	; 0x06
 7fe:	98 17       	cp	r25, r24
 800:	08 f4       	brcc	.+2      	; 0x804 <usbPoll+0x182>
 802:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 804:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <usbMsgLen>
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 808:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <usbRxLen>
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 80c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <usbTxLen>
 810:	84 ff       	sbrs	r24, 4
 812:	4b c0       	rjmp	.+150    	; 0x8aa <usbPoll+0x228>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 814:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <usbMsgLen>
 818:	8f 3f       	cpi	r24, 0xFF	; 255
 81a:	09 f4       	brne	.+2      	; 0x81e <usbPoll+0x19c>
 81c:	46 c0       	rjmp	.+140    	; 0x8aa <usbPoll+0x228>
 81e:	c8 2f       	mov	r28, r24
 820:	89 30       	cpi	r24, 0x09	; 9
 822:	08 f0       	brcs	.+2      	; 0x826 <usbPoll+0x1a4>
 824:	c8 e0       	ldi	r28, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 826:	8c 1b       	sub	r24, r28
 828:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <usbMsgLen>
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 82c:	ee e6       	ldi	r30, 0x6E	; 110
 82e:	f0 e0       	ldi	r31, 0x00	; 0
 830:	90 81       	ld	r25, Z
 832:	88 e8       	ldi	r24, 0x88	; 136
 834:	89 27       	eor	r24, r25
 836:	80 83       	st	Z, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 838:	cc 23       	and	r28, r28
 83a:	09 f4       	brne	.+2      	; 0x83e <usbPoll+0x1bc>
 83c:	44 c0       	rjmp	.+136    	; 0x8c6 <usbPoll+0x244>
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
 83e:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <usbMsgPtr>
 842:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <usbMsgPtr+0x1>
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 846:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <usbMsgFlags>
 84a:	86 ff       	sbrs	r24, 6
 84c:	10 c0       	rjmp	.+32     	; 0x86e <usbPoll+0x1ec>
 84e:	af e6       	ldi	r26, 0x6F	; 111
 850:	b0 e0       	ldi	r27, 0x00	; 0
 852:	f9 01       	movw	r30, r18
 854:	8c 2f       	mov	r24, r28
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 856:	94 91       	lpm	r25, Z
                    *data++ = c;
 858:	9d 93       	st	X+, r25
                    r++;
 85a:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
 85c:	81 50       	subi	r24, 0x01	; 1
 85e:	d9 f7       	brne	.-10     	; 0x856 <usbPoll+0x1d4>
 860:	8f ef       	ldi	r24, 0xFF	; 255
 862:	8c 0f       	add	r24, r28
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	01 96       	adiw	r24, 0x01	; 1
 868:	28 0f       	add	r18, r24
 86a:	39 1f       	adc	r19, r25
 86c:	0e c0       	rjmp	.+28     	; 0x88a <usbPoll+0x208>
 86e:	d9 01       	movw	r26, r18
 870:	ef e6       	ldi	r30, 0x6F	; 111
 872:	f0 e0       	ldi	r31, 0x00	; 0
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len, *r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 874:	8c 2f       	mov	r24, r28
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *r++;
 876:	9d 91       	ld	r25, X+
 878:	91 93       	st	Z+, r25
                }while(--i);
 87a:	81 50       	subi	r24, 0x01	; 1
 87c:	e1 f7       	brne	.-8      	; 0x876 <usbPoll+0x1f4>
 87e:	8f ef       	ldi	r24, 0xFF	; 255
 880:	8c 0f       	add	r24, r28
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	01 96       	adiw	r24, 0x01	; 1
 886:	28 0f       	add	r18, r24
 888:	39 1f       	adc	r19, r25
            }
            usbMsgPtr = r;
 88a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <usbMsgPtr+0x1>
 88e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <usbMsgPtr>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 892:	6c 2f       	mov	r22, r28
 894:	8f e6       	ldi	r24, 0x6F	; 111
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	4b dc       	rcall	.-1898   	; 0x130 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 89a:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 89c:	cc 30       	cpi	r28, 0x0C	; 12
 89e:	18 f4       	brcc	.+6      	; 0x8a6 <usbPoll+0x224>
            usbMsgLen = USB_NO_MSG;
 8a0:	8f ef       	ldi	r24, 0xFF	; 255
 8a2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <usbMsgLen>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 8a6:	c0 93 62 00 	sts	0x0062, r28	; 0x800062 <usbTxLen>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 8aa:	80 b3       	in	r24, 0x10	; 16
 8ac:	84 71       	andi	r24, 0x14	; 20
        if(usbLineStatus != 0)  /* SE0 has ended */
 8ae:	89 f4       	brne	.+34     	; 0x8d2 <usbPoll+0x250>
 8b0:	93 e1       	ldi	r25, 0x13	; 19
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 8b2:	80 b3       	in	r24, 0x10	; 16
 8b4:	84 71       	andi	r24, 0x14	; 20
        if(usbLineStatus != 0)  /* SE0 has ended */
 8b6:	69 f4       	brne	.+26     	; 0x8d2 <usbPoll+0x250>
 8b8:	91 50       	subi	r25, 0x01	; 1
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 8ba:	d9 f7       	brne	.-10     	; 0x8b2 <usbPoll+0x230>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 8bc:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <usbNewDeviceAddr>
    usbDeviceAddr = 0;
 8c0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <usbDeviceAddr>
 8c4:	06 c0       	rjmp	.+12     	; 0x8d2 <usbPoll+0x250>
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 8c6:	6c 2f       	mov	r22, r28
 8c8:	8f e6       	ldi	r24, 0x6F	; 111
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	31 dc       	rcall	.-1950   	; 0x130 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 8ce:	cc 5f       	subi	r28, 0xFC	; 252
 8d0:	e7 cf       	rjmp	.-50     	; 0x8a0 <usbPoll+0x21e>
    usbDeviceAddr = 0;
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 8d2:	df 91       	pop	r29
 8d4:	cf 91       	pop	r28
 8d6:	08 95       	ret

000008d8 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 8d8:	85 b7       	in	r24, 0x35	; 53
 8da:	82 60       	ori	r24, 0x02	; 2
 8dc:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 8de:	8b b7       	in	r24, 0x3b	; 59
 8e0:	80 64       	ori	r24, 0x40	; 64
 8e2:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 8e4:	e9 e7       	ldi	r30, 0x79	; 121
 8e6:	f0 e0       	ldi	r31, 0x00	; 0
 8e8:	8b e4       	ldi	r24, 0x4B	; 75
 8ea:	81 83       	std	Z+1, r24	; 0x01
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 8ec:	8a e5       	ldi	r24, 0x5A	; 90
 8ee:	80 83       	st	Z, r24
 8f0:	08 95       	ret

000008f2 <_exit>:
 8f2:	f8 94       	cli

000008f4 <__stop_program>:
 8f4:	ff cf       	rjmp	.-2      	; 0x8f4 <__stop_program>
